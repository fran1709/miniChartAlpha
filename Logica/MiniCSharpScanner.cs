//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Mariana Artavia Vene/Documents/GitHub/miniCharFinal/Logica\MiniCSharpScanner.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCSharpScanner : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LIST=1, INT_ID=2, STRING_ID=3, CHAR_ID=4, BOOL_ID=5, DOUBLE_ID=6, CLASS=7, 
		USING=8, VOID=9, IF=10, ELSE=11, WHILE=12, FOR=13, BREAK=14, RETURN=15, 
		READ=16, WRITE=17, NEW=18, BOOL=19, INT=20, DOUBLE=21, STRINGCONST=22, 
		CHARCONST=23, EscapeSequence=24, ASSIGN=25, AND=26, OR=27, PLUS=28, MINUS=29, 
		PLUSPLUS=30, MINUSMINUS=31, MULT=32, DIV=33, MOD=34, EQUALS=35, NOTEQUALS=36, 
		LESSTHAN=37, GREATERTHAN=38, LESSOREQUALS=39, GREATOREQUALS=40, DOT=41, 
		SEMICOLON=42, COMMA=43, LEFTPAREN=44, RIGHTPAREN=45, LEFTBRACK=46, RIGHTBRACK=47, 
		LEFTSBRACK=48, RIGHTSBRACK=49, IDENTIFIER=50, COMMENT=51, BLOCKCOMMENT=52, 
		WS=53;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LIST", "INT_ID", "STRING_ID", "CHAR_ID", "BOOL_ID", "DOUBLE_ID", "CLASS", 
		"USING", "VOID", "IF", "ELSE", "WHILE", "FOR", "BREAK", "RETURN", "READ", 
		"WRITE", "NEW", "BOOL", "INT", "DOUBLE", "STRINGCONST", "CHARCONST", "EscapeSequence", 
		"ASSIGN", "AND", "OR", "PLUS", "MINUS", "PLUSPLUS", "MINUSMINUS", "MULT", 
		"DIV", "MOD", "EQUALS", "NOTEQUALS", "LESSTHAN", "GREATERTHAN", "LESSOREQUALS", 
		"GREATOREQUALS", "DOT", "SEMICOLON", "COMMA", "LEFTPAREN", "RIGHTPAREN", 
		"LEFTBRACK", "RIGHTBRACK", "LEFTSBRACK", "RIGHTSBRACK", "LETTER", "DIGIT", 
		"IDENTIFIER", "COMMENT", "BLOCKCOMMENT", "WS"
	};


	public MiniCSharpScanner(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCSharpScanner(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'int'", "'string'", "'char'", "'bool'", "'double'", "'class'", 
		"'using'", "'void'", "'if'", "'else'", "'while'", "'for'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", null, null, null, null, null, 
		null, "'='", "'&&'", "'||'", "'+'", "'-'", "'++'", "'--'", "'*'", "'/'", 
		"'%'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'.'", "';'", "','", 
		"'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LIST", "INT_ID", "STRING_ID", "CHAR_ID", "BOOL_ID", "DOUBLE_ID", 
		"CLASS", "USING", "VOID", "IF", "ELSE", "WHILE", "FOR", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "BOOL", "INT", "DOUBLE", "STRINGCONST", "CHARCONST", 
		"EscapeSequence", "ASSIGN", "AND", "OR", "PLUS", "MINUS", "PLUSPLUS", 
		"MINUSMINUS", "MULT", "DIV", "MOD", "EQUALS", "NOTEQUALS", "LESSTHAN", 
		"GREATERTHAN", "LESSOREQUALS", "GREATOREQUALS", "DOT", "SEMICOLON", "COMMA", 
		"LEFTPAREN", "RIGHTPAREN", "LEFTBRACK", "RIGHTBRACK", "LEFTSBRACK", "RIGHTSBRACK", 
		"IDENTIFIER", "COMMENT", "BLOCKCOMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpScanner.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpScanner() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,53,381,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,0,
		1,0,1,0,3,0,118,8,0,1,0,1,0,1,0,3,0,123,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
		7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
		11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
		16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,3,18,227,8,18,1,19,4,19,230,8,19,11,19,12,19,231,1,20,4,20,
		235,8,20,11,20,12,20,236,1,20,1,20,5,20,241,8,20,10,20,12,20,244,9,20,
		3,20,246,8,20,1,20,1,20,3,20,250,8,20,1,20,4,20,253,8,20,11,20,12,20,254,
		3,20,257,8,20,1,21,1,21,1,21,1,21,5,21,263,8,21,10,21,12,21,266,9,21,1,
		21,1,21,1,22,1,22,1,22,3,22,273,8,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
		1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,
		1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
		1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,
		1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
		1,49,1,49,1,50,1,50,1,51,1,51,1,51,5,51,345,8,51,10,51,12,51,348,9,51,
		1,52,1,52,1,52,1,52,5,52,354,8,52,10,52,12,52,357,9,52,1,52,1,52,1,53,
		1,53,1,53,1,53,5,53,365,8,53,10,53,12,53,368,9,53,1,53,1,53,1,53,1,53,
		1,53,1,54,4,54,376,8,54,11,54,12,54,377,1,54,1,54,0,0,55,1,1,3,2,5,3,7,
		4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
		17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
		29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
		41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,0,101,0,103,50,105,
		51,107,52,109,53,1,0,9,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,4,0,
		10,10,13,13,34,34,92,92,2,0,39,39,92,92,8,0,34,34,39,39,92,92,98,98,102,
		102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,2,0,10,10,13,13,3,0,
		9,10,13,13,32,32,401,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
		1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
		0,0,97,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
		1,117,1,0,0,0,3,126,1,0,0,0,5,130,1,0,0,0,7,137,1,0,0,0,9,142,1,0,0,0,
		11,147,1,0,0,0,13,154,1,0,0,0,15,160,1,0,0,0,17,166,1,0,0,0,19,171,1,0,
		0,0,21,174,1,0,0,0,23,179,1,0,0,0,25,185,1,0,0,0,27,189,1,0,0,0,29,195,
		1,0,0,0,31,202,1,0,0,0,33,207,1,0,0,0,35,213,1,0,0,0,37,226,1,0,0,0,39,
		229,1,0,0,0,41,234,1,0,0,0,43,258,1,0,0,0,45,269,1,0,0,0,47,276,1,0,0,
		0,49,279,1,0,0,0,51,281,1,0,0,0,53,284,1,0,0,0,55,287,1,0,0,0,57,289,1,
		0,0,0,59,291,1,0,0,0,61,294,1,0,0,0,63,297,1,0,0,0,65,299,1,0,0,0,67,301,
		1,0,0,0,69,303,1,0,0,0,71,306,1,0,0,0,73,309,1,0,0,0,75,311,1,0,0,0,77,
		313,1,0,0,0,79,316,1,0,0,0,81,319,1,0,0,0,83,321,1,0,0,0,85,323,1,0,0,
		0,87,325,1,0,0,0,89,327,1,0,0,0,91,329,1,0,0,0,93,331,1,0,0,0,95,333,1,
		0,0,0,97,335,1,0,0,0,99,337,1,0,0,0,101,339,1,0,0,0,103,341,1,0,0,0,105,
		349,1,0,0,0,107,360,1,0,0,0,109,375,1,0,0,0,111,118,3,3,1,0,112,118,3,
		5,2,0,113,118,3,7,3,0,114,118,3,9,4,0,115,118,3,11,5,0,116,118,3,103,51,
		0,117,111,1,0,0,0,117,112,1,0,0,0,117,113,1,0,0,0,117,114,1,0,0,0,117,
		115,1,0,0,0,117,116,1,0,0,0,118,119,1,0,0,0,119,122,3,95,47,0,120,123,
		3,103,51,0,121,123,3,39,19,0,122,120,1,0,0,0,122,121,1,0,0,0,122,123,1,
		0,0,0,123,124,1,0,0,0,124,125,3,97,48,0,125,2,1,0,0,0,126,127,5,105,0,
		0,127,128,5,110,0,0,128,129,5,116,0,0,129,4,1,0,0,0,130,131,5,115,0,0,
		131,132,5,116,0,0,132,133,5,114,0,0,133,134,5,105,0,0,134,135,5,110,0,
		0,135,136,5,103,0,0,136,6,1,0,0,0,137,138,5,99,0,0,138,139,5,104,0,0,139,
		140,5,97,0,0,140,141,5,114,0,0,141,8,1,0,0,0,142,143,5,98,0,0,143,144,
		5,111,0,0,144,145,5,111,0,0,145,146,5,108,0,0,146,10,1,0,0,0,147,148,5,
		100,0,0,148,149,5,111,0,0,149,150,5,117,0,0,150,151,5,98,0,0,151,152,5,
		108,0,0,152,153,5,101,0,0,153,12,1,0,0,0,154,155,5,99,0,0,155,156,5,108,
		0,0,156,157,5,97,0,0,157,158,5,115,0,0,158,159,5,115,0,0,159,14,1,0,0,
		0,160,161,5,117,0,0,161,162,5,115,0,0,162,163,5,105,0,0,163,164,5,110,
		0,0,164,165,5,103,0,0,165,16,1,0,0,0,166,167,5,118,0,0,167,168,5,111,0,
		0,168,169,5,105,0,0,169,170,5,100,0,0,170,18,1,0,0,0,171,172,5,105,0,0,
		172,173,5,102,0,0,173,20,1,0,0,0,174,175,5,101,0,0,175,176,5,108,0,0,176,
		177,5,115,0,0,177,178,5,101,0,0,178,22,1,0,0,0,179,180,5,119,0,0,180,181,
		5,104,0,0,181,182,5,105,0,0,182,183,5,108,0,0,183,184,5,101,0,0,184,24,
		1,0,0,0,185,186,5,102,0,0,186,187,5,111,0,0,187,188,5,114,0,0,188,26,1,
		0,0,0,189,190,5,98,0,0,190,191,5,114,0,0,191,192,5,101,0,0,192,193,5,97,
		0,0,193,194,5,107,0,0,194,28,1,0,0,0,195,196,5,114,0,0,196,197,5,101,0,
		0,197,198,5,116,0,0,198,199,5,117,0,0,199,200,5,114,0,0,200,201,5,110,
		0,0,201,30,1,0,0,0,202,203,5,114,0,0,203,204,5,101,0,0,204,205,5,97,0,
		0,205,206,5,100,0,0,206,32,1,0,0,0,207,208,5,119,0,0,208,209,5,114,0,0,
		209,210,5,105,0,0,210,211,5,116,0,0,211,212,5,101,0,0,212,34,1,0,0,0,213,
		214,5,110,0,0,214,215,5,101,0,0,215,216,5,119,0,0,216,36,1,0,0,0,217,218,
		5,116,0,0,218,219,5,114,0,0,219,220,5,117,0,0,220,227,5,101,0,0,221,222,
		5,102,0,0,222,223,5,97,0,0,223,224,5,108,0,0,224,225,5,115,0,0,225,227,
		5,101,0,0,226,217,1,0,0,0,226,221,1,0,0,0,227,38,1,0,0,0,228,230,3,101,
		50,0,229,228,1,0,0,0,230,231,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,
		40,1,0,0,0,233,235,7,0,0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,
		0,0,236,237,1,0,0,0,237,245,1,0,0,0,238,242,5,46,0,0,239,241,7,0,0,0,240,
		239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,246,1,
		0,0,0,244,242,1,0,0,0,245,238,1,0,0,0,245,246,1,0,0,0,246,256,1,0,0,0,
		247,249,7,1,0,0,248,250,7,2,0,0,249,248,1,0,0,0,249,250,1,0,0,0,250,252,
		1,0,0,0,251,253,7,0,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,0,0,
		0,254,255,1,0,0,0,255,257,1,0,0,0,256,247,1,0,0,0,256,257,1,0,0,0,257,
		42,1,0,0,0,258,264,5,34,0,0,259,263,8,3,0,0,260,261,5,92,0,0,261,263,9,
		0,0,0,262,259,1,0,0,0,262,260,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,
		264,265,1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,268,5,34,0,0,268,44,
		1,0,0,0,269,272,5,39,0,0,270,273,3,47,23,0,271,273,8,4,0,0,272,270,1,0,
		0,0,272,271,1,0,0,0,273,274,1,0,0,0,274,275,5,39,0,0,275,46,1,0,0,0,276,
		277,5,92,0,0,277,278,7,5,0,0,278,48,1,0,0,0,279,280,5,61,0,0,280,50,1,
		0,0,0,281,282,5,38,0,0,282,283,5,38,0,0,283,52,1,0,0,0,284,285,5,124,0,
		0,285,286,5,124,0,0,286,54,1,0,0,0,287,288,5,43,0,0,288,56,1,0,0,0,289,
		290,5,45,0,0,290,58,1,0,0,0,291,292,5,43,0,0,292,293,5,43,0,0,293,60,1,
		0,0,0,294,295,5,45,0,0,295,296,5,45,0,0,296,62,1,0,0,0,297,298,5,42,0,
		0,298,64,1,0,0,0,299,300,5,47,0,0,300,66,1,0,0,0,301,302,5,37,0,0,302,
		68,1,0,0,0,303,304,5,61,0,0,304,305,5,61,0,0,305,70,1,0,0,0,306,307,5,
		33,0,0,307,308,5,61,0,0,308,72,1,0,0,0,309,310,5,60,0,0,310,74,1,0,0,0,
		311,312,5,62,0,0,312,76,1,0,0,0,313,314,5,60,0,0,314,315,5,61,0,0,315,
		78,1,0,0,0,316,317,5,62,0,0,317,318,5,61,0,0,318,80,1,0,0,0,319,320,5,
		46,0,0,320,82,1,0,0,0,321,322,5,59,0,0,322,84,1,0,0,0,323,324,5,44,0,0,
		324,86,1,0,0,0,325,326,5,40,0,0,326,88,1,0,0,0,327,328,5,41,0,0,328,90,
		1,0,0,0,329,330,5,123,0,0,330,92,1,0,0,0,331,332,5,125,0,0,332,94,1,0,
		0,0,333,334,5,91,0,0,334,96,1,0,0,0,335,336,5,93,0,0,336,98,1,0,0,0,337,
		338,7,6,0,0,338,100,1,0,0,0,339,340,7,0,0,0,340,102,1,0,0,0,341,346,3,
		99,49,0,342,345,3,99,49,0,343,345,3,101,50,0,344,342,1,0,0,0,344,343,1,
		0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,104,1,0,0,0,
		348,346,1,0,0,0,349,350,5,47,0,0,350,351,5,47,0,0,351,355,1,0,0,0,352,
		354,8,7,0,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,
		0,0,0,356,358,1,0,0,0,357,355,1,0,0,0,358,359,6,52,0,0,359,106,1,0,0,0,
		360,361,5,47,0,0,361,362,5,42,0,0,362,366,1,0,0,0,363,365,8,7,0,0,364,
		363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,369,1,
		0,0,0,368,366,1,0,0,0,369,370,5,42,0,0,370,371,5,47,0,0,371,372,1,0,0,
		0,372,373,6,53,0,0,373,108,1,0,0,0,374,376,7,8,0,0,375,374,1,0,0,0,376,
		377,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,6,
		54,0,0,380,110,1,0,0,0,19,0,117,122,226,231,236,242,245,249,254,256,262,
		264,272,344,346,355,366,377,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
