//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/franj/source/repos/Proyectos Compi/miniCharFinal/Logica\MiniCSharpParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LIST=1, INT_ID=2, STRING_ID=3, CHAR_ID=4, BOOL_ID=5, DOUBLE_ID=6, CLASS=7, 
		USING=8, VOID=9, IF=10, ELSE=11, WHILE=12, FOR=13, BREAK=14, RETURN=15, 
		READ=16, WRITE=17, NEW=18, BOOL=19, INT=20, DOUBLE=21, STRINGCONST=22, 
		CHARCONST=23, EscapeSequence=24, ASSIGN=25, AND=26, OR=27, PLUS=28, MINUS=29, 
		PLUSPLUS=30, MINUSMINUS=31, MULT=32, DIV=33, MOD=34, EQUALS=35, NOTEQUALS=36, 
		LESSTHAN=37, GREATERTHAN=38, LESSOREQUALS=39, GREATOREQUALS=40, DOT=41, 
		SEMICOLON=42, COMMA=43, LEFTPAREN=44, RIGHTPAREN=45, LEFTBRACK=46, RIGHTBRACK=47, 
		LEFTSBRACK=48, RIGHTSBRACK=49, IDENTIFIER=50, COMMENT=51, BLOCKCOMMENT=52, 
		WS=53;
	public const int
		RULE_program = 0, RULE_using = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_statement = 7, 
		RULE_block = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_cast = 13, RULE_expr = 14, RULE_term = 15, RULE_factor = 16, 
		RULE_ident = 17, RULE_designator = 18, RULE_relop = 19, RULE_addop = 20, 
		RULE_mulop = 21;
	public static readonly string[] ruleNames = {
		"program", "using", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "statement", "block", "actPars", "condition", "condTerm", "condFact", 
		"cast", "expr", "term", "factor", "ident", "designator", "relop", "addop", 
		"mulop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'int'", "'string'", "'char'", "'bool'", "'double'", "'class'", 
		"'using'", "'void'", "'if'", "'else'", "'while'", "'for'", "'break'", 
		"'return'", "'read'", "'write'", "'new'", null, null, null, null, null, 
		null, "'='", "'&&'", "'||'", "'+'", "'-'", "'++'", "'--'", "'*'", "'/'", 
		"'%'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'.'", "';'", "','", 
		"'('", "')'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LIST", "INT_ID", "STRING_ID", "CHAR_ID", "BOOL_ID", "DOUBLE_ID", 
		"CLASS", "USING", "VOID", "IF", "ELSE", "WHILE", "FOR", "BREAK", "RETURN", 
		"READ", "WRITE", "NEW", "BOOL", "INT", "DOUBLE", "STRINGCONST", "CHARCONST", 
		"EscapeSequence", "ASSIGN", "AND", "OR", "PLUS", "MINUS", "PLUSPLUS", 
		"MINUSMINUS", "MULT", "DIV", "MOD", "EQUALS", "NOTEQUALS", "LESSTHAN", 
		"GREATERTHAN", "LESSOREQUALS", "GREATOREQUALS", "DOT", "SEMICOLON", "COMMA", 
		"LEFTPAREN", "RIGHTPAREN", "LEFTBRACK", "RIGHTBRACK", "LEFTSBRACK", "RIGHTSBRACK", 
		"IDENTIFIER", "COMMENT", "BLOCKCOMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramASTContext : ProgramContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACK() { return GetToken(MiniCSharpParser.LEFTBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACK() { return GetToken(MiniCSharpParser.RIGHTBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCSharpParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext[] @using() {
			return GetRuleContexts<UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using(int i) {
			return GetRuleContext<UsingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramASTContext(ProgramContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			_localctx = new ProgramASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 44;
				@using();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50;
			Match(CLASS);
			State = 51;
			ident();
			State = 52;
			Match(LEFTBRACK);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1125899906843390L) != 0) {
				{
				State = 56;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 53;
					varDecl();
					}
					break;
				case 2:
					{
					State = 54;
					classDecl();
					}
					break;
				case 3:
					{
					State = 55;
					methodDecl();
					}
					break;
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61;
			Match(RIGHTBRACK);
			State = 62;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
	 
		public UsingContext() { }
		public virtual void CopyFrom(UsingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsignASTContext : UsingContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MiniCSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public UsignASTContext(UsingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsignAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_using);
		try {
			_localctx = new UsignASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(USING);
			State = 65;
			ident();
			State = 66;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public int indexVar = 0;
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
			this.indexVar = context.indexVar;
		}
	}
	public partial class VarDeclaASTContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public VarDeclaASTContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			_localctx = new VarDeclaASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			type();
			State = 69;
			ident();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 70;
				Match(COMMA);
				State = 71;
				ident();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	 
		public ClassDeclContext() { }
		public virtual void CopyFrom(ClassDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassDeclaASTContext : ClassDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACK() { return GetToken(MiniCSharpParser.LEFTBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACK() { return GetToken(MiniCSharpParser.RIGHTBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclaASTContext(ClassDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		int _la;
		try {
			_localctx = new ClassDeclaASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(CLASS);
			State = 80;
			ident();
			State = 81;
			Match(LEFTBRACK);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1125899906842750L) != 0) {
				{
				{
				State = 82;
				varDecl();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88;
			Match(RIGHTBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	 
		public MethodDeclContext() { }
		public virtual void CopyFrom(MethodDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethDeclaASTContext : MethodDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(MiniCSharpParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(MiniCSharpParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethDeclaASTContext(MethodDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethDeclaAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			_localctx = new MethDeclaASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIST:
			case INT_ID:
			case STRING_ID:
			case CHAR_ID:
			case BOOL_ID:
			case DOUBLE_ID:
			case IDENTIFIER:
				{
				State = 90;
				type();
				}
				break;
			case VOID:
				{
				State = 91;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 94;
			ident();
			State = 95;
			Match(LEFTPAREN);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1125899906842750L) != 0) {
				{
				State = 96;
				formPars();
				}
			}

			State = 99;
			Match(RIGHTPAREN);
			State = 100;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	 
		public FormParsContext() { }
		public virtual void CopyFrom(FormParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FormParsASTContext : FormParsContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public FormParsASTContext(FormParsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			_localctx = new FormParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			type();
			State = 103;
			ident();
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 104;
				Match(COMMA);
				State = 105;
				type();
				State = 106;
				ident();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeASTContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTSBRACK() { return GetToken(MiniCSharpParser.LEFTSBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTSBRACK() { return GetToken(MiniCSharpParser.RIGHTSBRACK, 0); }
		public TypeASTContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			_localctx = new TypeASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ident();
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFTSBRACK) {
				{
				State = 114;
				Match(LEFTSBRACK);
				State = 115;
				Match(RIGHTSBRACK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SemicolonStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public SemicolonStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemicolonStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteNumberStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MiniCSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(MiniCSharpParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(MiniCSharpParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniCSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCSharpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MiniCSharpParser.DOUBLE, 0); }
		public WriteNumberStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteNumberStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(MiniCSharpParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCSharpParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCSharpParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(MiniCSharpParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ForStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniCSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public BreakStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(MiniCSharpParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(MiniCSharpParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCSharpParser.ELSE, 0); }
		public IfStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(MiniCSharpParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(MiniCSharpParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSPLUS() { return GetToken(MiniCSharpParser.PLUSPLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSMINUS() { return GetToken(MiniCSharpParser.MINUSMINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public AssignStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileNumberStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MiniCSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(MiniCSharpParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(MiniCSharpParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public WhileNumberStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileNumberStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileConditionStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(MiniCSharpParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(MiniCSharpParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileConditionStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileConditionStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIST:
			case INT_ID:
			case STRING_ID:
			case CHAR_ID:
			case BOOL_ID:
			case DOUBLE_ID:
			case IDENTIFIER:
				_localctx = new AssignStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				designator();
				State = 128;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 119;
					Match(ASSIGN);
					State = 120;
					expr();
					}
					break;
				case LEFTPAREN:
					{
					State = 121;
					Match(LEFTPAREN);
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1143492646273150L) != 0) {
						{
						State = 122;
						actPars();
						}
					}

					State = 125;
					Match(RIGHTPAREN);
					}
					break;
				case PLUSPLUS:
					{
					State = 126;
					Match(PLUSPLUS);
					}
					break;
				case MINUSMINUS:
					{
					State = 127;
					Match(MINUSMINUS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 130;
				Match(SEMICOLON);
				}
				break;
			case IF:
				_localctx = new IfStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				Match(IF);
				State = 133;
				Match(LEFTPAREN);
				State = 134;
				condition();
				State = 135;
				Match(RIGHTPAREN);
				State = 136;
				statement();
				State = 139;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 137;
					Match(ELSE);
					State = 138;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				_localctx = new ForStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 141;
				Match(FOR);
				State = 142;
				Match(LEFTPAREN);
				State = 143;
				expr();
				State = 144;
				Match(SEMICOLON);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1143492646273150L) != 0) {
					{
					State = 145;
					condition();
					}
				}

				State = 148;
				Match(SEMICOLON);
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1200666697790590L) != 0) {
					{
					State = 149;
					statement();
					}
				}

				State = 152;
				Match(RIGHTPAREN);
				State = 153;
				statement();
				}
				break;
			case WHILE:
				_localctx = new WhileConditionStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 155;
				Match(WHILE);
				State = 156;
				Match(LEFTPAREN);
				State = 157;
				condition();
				State = 158;
				Match(RIGHTPAREN);
				State = 159;
				statement();
				}
				break;
			case BREAK:
				_localctx = new BreakStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 161;
				Match(BREAK);
				State = 162;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 163;
				Match(RETURN);
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1143492646273150L) != 0) {
					{
					State = 164;
					expr();
					}
				}

				State = 167;
				Match(SEMICOLON);
				}
				break;
			case READ:
				_localctx = new WhileNumberStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 168;
				Match(READ);
				State = 169;
				Match(LEFTPAREN);
				State = 170;
				designator();
				State = 171;
				Match(RIGHTPAREN);
				State = 172;
				Match(SEMICOLON);
				}
				break;
			case WRITE:
				_localctx = new WriteNumberStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 174;
				Match(WRITE);
				State = 175;
				Match(LEFTPAREN);
				State = 176;
				expr();
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 177;
					Match(COMMA);
					State = 178;
					_la = TokenStream.LA(1);
					if ( !(_la==INT || _la==DOUBLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 181;
				Match(RIGHTPAREN);
				State = 182;
				Match(SEMICOLON);
				}
				break;
			case LEFTBRACK:
				_localctx = new BlockStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 184;
				block();
				}
				break;
			case SEMICOLON:
				_localctx = new SemicolonStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 185;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockASTContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTBRACK() { return GetToken(MiniCSharpParser.LEFTBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTBRACK() { return GetToken(MiniCSharpParser.RIGHTBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockASTContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			_localctx = new BlockASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(LEFTBRACK);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1200666697790590L) != 0) {
				{
				State = 191;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 189;
					varDecl();
					}
					break;
				case 2:
					{
					State = 190;
					statement();
					}
					break;
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 196;
			Match(RIGHTBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	 
		public ActParsContext() { }
		public virtual void CopyFrom(ActParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ActParsASTContext : ActParsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ActParsASTContext(ActParsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			_localctx = new ActParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			expr();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 199;
				Match(COMMA);
				State = 200;
				expr();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionASTContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MiniCSharpParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MiniCSharpParser.OR, i);
		}
		public ConditionASTContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			_localctx = new ConditionASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			condTerm();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 207;
				Match(OR);
				State = 208;
				condTerm();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	 
		public CondTermContext() { }
		public virtual void CopyFrom(CondTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondTermASTContext : CondTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MiniCSharpParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MiniCSharpParser.AND, i);
		}
		public CondTermASTContext(CondTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			_localctx = new CondTermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			condFact();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 215;
				Match(AND);
				State = 216;
				condFact();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	 
		public CondFactContext() { }
		public virtual void CopyFrom(CondFactContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondFactASTContext : CondFactContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactASTContext(CondFactContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFactAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			_localctx = new CondFactASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			expr();
			State = 223;
			relop();
			State = 224;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	 
		public CastContext() { }
		public virtual void CopyFrom(CastContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CastASTContext : CastContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(MiniCSharpParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(MiniCSharpParser.RIGHTPAREN, 0); }
		public CastASTContext(CastContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 26, RULE_cast);
		try {
			_localctx = new CastASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(LEFTPAREN);
			State = 227;
			type();
			State = 228;
			Match(RIGHTPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprASTContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCSharpParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprASTContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			_localctx = new ExprASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 230;
				Match(MINUS);
				}
			}

			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 233;
				cast();
				}
				break;
			}
			State = 236;
			term();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 237;
				addop();
				State = 238;
				term();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermASTContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermASTContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 30, RULE_term);
		int _la;
		try {
			_localctx = new TermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			factor();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0) {
				{
				{
				State = 246;
				mulop();
				State = 247;
				factor();
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DesignFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(MiniCSharpParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(MiniCSharpParser.RIGHTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public DesignFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MiniCSharpParser.BOOL, 0); }
		public BoolFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprInparentFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTPAREN() { return GetToken(MiniCSharpParser.LEFTPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTPAREN() { return GetToken(MiniCSharpParser.RIGHTPAREN, 0); }
		public ExprInparentFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprInparentFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MiniCSharpParser.DOUBLE, 0); }
		public DoubFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MiniCSharpParser.INT, 0); }
		public IntFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharconstFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARCONST() { return GetToken(MiniCSharpParser.CHARCONST, 0); }
		public CharconstFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharconstFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrconstFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGCONST() { return GetToken(MiniCSharpParser.STRINGCONST, 0); }
		public StrconstFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrconstFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewIdentFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MiniCSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public NewIdentFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewIdentFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_factor);
		int _la;
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIST:
			case INT_ID:
			case STRING_ID:
			case CHAR_ID:
			case BOOL_ID:
			case DOUBLE_ID:
			case IDENTIFIER:
				_localctx = new DesignFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 254;
				designator();
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFTPAREN) {
					{
					State = 255;
					Match(LEFTPAREN);
					State = 257;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1143492646273150L) != 0) {
						{
						State = 256;
						actPars();
						}
					}

					State = 259;
					Match(RIGHTPAREN);
					}
				}

				}
				break;
			case CHARCONST:
				_localctx = new CharconstFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				Match(CHARCONST);
				}
				break;
			case STRINGCONST:
				_localctx = new StrconstFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 263;
				Match(STRINGCONST);
				}
				break;
			case INT:
				_localctx = new IntFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 264;
				Match(INT);
				}
				break;
			case DOUBLE:
				_localctx = new DoubFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 265;
				Match(DOUBLE);
				}
				break;
			case BOOL:
				_localctx = new BoolFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 266;
				Match(BOOL);
				}
				break;
			case NEW:
				_localctx = new NewIdentFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 267;
				Match(NEW);
				State = 268;
				ident();
				}
				break;
			case LEFTPAREN:
				_localctx = new ExprInparentFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 269;
				Match(LEFTPAREN);
				State = 270;
				expr();
				State = 271;
				Match(RIGHTPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		public ParserRuleContext declPointer = null;
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
	 
		public IdentContext() { }
		public virtual void CopyFrom(IdentContext context) {
			base.CopyFrom(context);
			this.declPointer = context.declPointer;
		}
	}
	public partial class BoolIdIdentASTContext : IdentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_ID() { return GetToken(MiniCSharpParser.BOOL_ID, 0); }
		public BoolIdIdentASTContext(IdentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolIdIdentAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListIdentASTContext : IdentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MiniCSharpParser.LIST, 0); }
		public ListIdentASTContext(IdentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListIdentAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharIdIdentASTContext : IdentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_ID() { return GetToken(MiniCSharpParser.CHAR_ID, 0); }
		public CharIdIdentASTContext(IdentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharIdIdentAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierIdentASTContext : IdentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MiniCSharpParser.IDENTIFIER, 0); }
		public IdentifierIdentASTContext(IdentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierIdentAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubIdIdentASTContext : IdentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_ID() { return GetToken(MiniCSharpParser.DOUBLE_ID, 0); }
		public DoubIdIdentASTContext(IdentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubIdIdentAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntIdIdentASTContext : IdentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_ID() { return GetToken(MiniCSharpParser.INT_ID, 0); }
		public IntIdIdentASTContext(IdentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntIdIdentAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrIdIdentASTContext : IdentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_ID() { return GetToken(MiniCSharpParser.STRING_ID, 0); }
		public StrIdIdentASTContext(IdentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrIdIdentAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 34, RULE_ident);
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_ID:
				_localctx = new IntIdIdentASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				Match(INT_ID);
				}
				break;
			case CHAR_ID:
				_localctx = new CharIdIdentASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				Match(CHAR_ID);
				}
				break;
			case DOUBLE_ID:
				_localctx = new DoubIdIdentASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 277;
				Match(DOUBLE_ID);
				}
				break;
			case BOOL_ID:
				_localctx = new BoolIdIdentASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 278;
				Match(BOOL_ID);
				}
				break;
			case STRING_ID:
				_localctx = new StrIdIdentASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 279;
				Match(STRING_ID);
				}
				break;
			case IDENTIFIER:
				_localctx = new IdentifierIdentASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 280;
				Match(IDENTIFIER);
				}
				break;
			case LIST:
				_localctx = new ListIdentASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 281;
				Match(LIST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	 
		public DesignatorContext() { }
		public virtual void CopyFrom(DesignatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DesignatorASTContext : DesignatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSharpParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFTSBRACK() { return GetTokens(MiniCSharpParser.LEFTSBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTSBRACK(int i) {
			return GetToken(MiniCSharpParser.LEFTSBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHTSBRACK() { return GetTokens(MiniCSharpParser.RIGHTSBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTSBRACK(int i) {
			return GetToken(MiniCSharpParser.RIGHTSBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(MiniCSharpParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(MiniCSharpParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(MiniCSharpParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(MiniCSharpParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MiniCSharpParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MiniCSharpParser.MINUS, i);
		}
		public DesignatorASTContext(DesignatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_designator);
		int _la;
		try {
			_localctx = new DesignatorASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ident();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT || _la==LEFTSBRACK) {
				{
				State = 293;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 285;
					Match(DOT);
					State = 286;
					ident();
					}
					break;
				case LEFTSBRACK:
					{
					State = 287;
					Match(LEFTSBRACK);
					State = 289;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MINUS) {
						{
						State = 288;
						Match(MINUS);
						}
					}

					State = 291;
					_la = TokenStream.LA(1);
					if ( !(_la==INT || _la==IDENTIFIER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 292;
					Match(RIGHTSBRACK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MiniCSharpParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUALS() { return GetToken(MiniCSharpParser.NOTEQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(MiniCSharpParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATOREQUALS() { return GetToken(MiniCSharpParser.GREATOREQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(MiniCSharpParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSOREQUALS() { return GetToken(MiniCSharpParser.LESSOREQUALS, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 38, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2164663517184L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MiniCSharpParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MiniCSharpParser.MINUS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 40, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(MiniCSharpParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniCSharpParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MiniCSharpParser.MOD, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 42, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,53,305,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,5,0,46,8,0,10,0,12,0,49,9,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,57,8,0,10,
		0,12,0,60,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,73,8,2,10,
		2,12,2,76,9,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,84,8,3,10,3,12,3,87,9,3,1,3,
		1,3,1,4,1,4,3,4,93,8,4,1,4,1,4,1,4,3,4,98,8,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,1,5,1,5,5,5,109,8,5,10,5,12,5,112,9,5,1,6,1,6,1,6,3,6,117,8,6,1,7,
		1,7,1,7,1,7,1,7,3,7,124,8,7,1,7,1,7,1,7,3,7,129,8,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,3,7,140,8,7,1,7,1,7,1,7,1,7,1,7,3,7,147,8,7,1,7,1,7,
		3,7,151,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,166,
		8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,180,8,7,1,7,1,
		7,1,7,1,7,1,7,3,7,187,8,7,1,8,1,8,1,8,5,8,192,8,8,10,8,12,8,195,9,8,1,
		8,1,8,1,9,1,9,1,9,5,9,202,8,9,10,9,12,9,205,9,9,1,10,1,10,1,10,5,10,210,
		8,10,10,10,12,10,213,9,10,1,11,1,11,1,11,5,11,218,8,11,10,11,12,11,221,
		9,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,3,14,232,8,14,1,14,3,
		14,235,8,14,1,14,1,14,1,14,1,14,5,14,241,8,14,10,14,12,14,244,9,14,1,15,
		1,15,1,15,1,15,5,15,250,8,15,10,15,12,15,253,9,15,1,16,1,16,1,16,3,16,
		258,8,16,1,16,3,16,261,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,3,16,274,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,283,
		8,17,1,18,1,18,1,18,1,18,1,18,3,18,290,8,18,1,18,1,18,5,18,294,8,18,10,
		18,12,18,297,9,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,0,0,22,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,0,5,1,0,20,21,2,0,20,
		20,50,50,1,0,35,40,1,0,28,29,1,0,32,34,337,0,47,1,0,0,0,2,64,1,0,0,0,4,
		68,1,0,0,0,6,79,1,0,0,0,8,92,1,0,0,0,10,102,1,0,0,0,12,113,1,0,0,0,14,
		186,1,0,0,0,16,188,1,0,0,0,18,198,1,0,0,0,20,206,1,0,0,0,22,214,1,0,0,
		0,24,222,1,0,0,0,26,226,1,0,0,0,28,231,1,0,0,0,30,245,1,0,0,0,32,273,1,
		0,0,0,34,282,1,0,0,0,36,284,1,0,0,0,38,298,1,0,0,0,40,300,1,0,0,0,42,302,
		1,0,0,0,44,46,3,2,1,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,
		1,0,0,0,48,50,1,0,0,0,49,47,1,0,0,0,50,51,5,7,0,0,51,52,3,34,17,0,52,58,
		5,46,0,0,53,57,3,4,2,0,54,57,3,6,3,0,55,57,3,8,4,0,56,53,1,0,0,0,56,54,
		1,0,0,0,56,55,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,61,
		1,0,0,0,60,58,1,0,0,0,61,62,5,47,0,0,62,63,5,0,0,1,63,1,1,0,0,0,64,65,
		5,8,0,0,65,66,3,34,17,0,66,67,5,42,0,0,67,3,1,0,0,0,68,69,3,12,6,0,69,
		74,3,34,17,0,70,71,5,43,0,0,71,73,3,34,17,0,72,70,1,0,0,0,73,76,1,0,0,
		0,74,72,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,74,1,0,0,0,77,78,5,42,0,
		0,78,5,1,0,0,0,79,80,5,7,0,0,80,81,3,34,17,0,81,85,5,46,0,0,82,84,3,4,
		2,0,83,82,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,88,1,0,
		0,0,87,85,1,0,0,0,88,89,5,47,0,0,89,7,1,0,0,0,90,93,3,12,6,0,91,93,5,9,
		0,0,92,90,1,0,0,0,92,91,1,0,0,0,93,94,1,0,0,0,94,95,3,34,17,0,95,97,5,
		44,0,0,96,98,3,10,5,0,97,96,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,100,
		5,45,0,0,100,101,3,16,8,0,101,9,1,0,0,0,102,103,3,12,6,0,103,110,3,34,
		17,0,104,105,5,43,0,0,105,106,3,12,6,0,106,107,3,34,17,0,107,109,1,0,0,
		0,108,104,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,
		11,1,0,0,0,112,110,1,0,0,0,113,116,3,34,17,0,114,115,5,48,0,0,115,117,
		5,49,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,13,1,0,0,0,118,128,3,36,18,
		0,119,120,5,25,0,0,120,129,3,28,14,0,121,123,5,44,0,0,122,124,3,18,9,0,
		123,122,1,0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,129,5,45,0,0,126,129,
		5,30,0,0,127,129,5,31,0,0,128,119,1,0,0,0,128,121,1,0,0,0,128,126,1,0,
		0,0,128,127,1,0,0,0,129,130,1,0,0,0,130,131,5,42,0,0,131,187,1,0,0,0,132,
		133,5,10,0,0,133,134,5,44,0,0,134,135,3,20,10,0,135,136,5,45,0,0,136,139,
		3,14,7,0,137,138,5,11,0,0,138,140,3,14,7,0,139,137,1,0,0,0,139,140,1,0,
		0,0,140,187,1,0,0,0,141,142,5,13,0,0,142,143,5,44,0,0,143,144,3,28,14,
		0,144,146,5,42,0,0,145,147,3,20,10,0,146,145,1,0,0,0,146,147,1,0,0,0,147,
		148,1,0,0,0,148,150,5,42,0,0,149,151,3,14,7,0,150,149,1,0,0,0,150,151,
		1,0,0,0,151,152,1,0,0,0,152,153,5,45,0,0,153,154,3,14,7,0,154,187,1,0,
		0,0,155,156,5,12,0,0,156,157,5,44,0,0,157,158,3,20,10,0,158,159,5,45,0,
		0,159,160,3,14,7,0,160,187,1,0,0,0,161,162,5,14,0,0,162,187,5,42,0,0,163,
		165,5,15,0,0,164,166,3,28,14,0,165,164,1,0,0,0,165,166,1,0,0,0,166,167,
		1,0,0,0,167,187,5,42,0,0,168,169,5,16,0,0,169,170,5,44,0,0,170,171,3,36,
		18,0,171,172,5,45,0,0,172,173,5,42,0,0,173,187,1,0,0,0,174,175,5,17,0,
		0,175,176,5,44,0,0,176,179,3,28,14,0,177,178,5,43,0,0,178,180,7,0,0,0,
		179,177,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,182,5,45,0,0,182,183,
		5,42,0,0,183,187,1,0,0,0,184,187,3,16,8,0,185,187,5,42,0,0,186,118,1,0,
		0,0,186,132,1,0,0,0,186,141,1,0,0,0,186,155,1,0,0,0,186,161,1,0,0,0,186,
		163,1,0,0,0,186,168,1,0,0,0,186,174,1,0,0,0,186,184,1,0,0,0,186,185,1,
		0,0,0,187,15,1,0,0,0,188,193,5,46,0,0,189,192,3,4,2,0,190,192,3,14,7,0,
		191,189,1,0,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,
		1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,5,47,0,0,197,17,1,0,0,
		0,198,203,3,28,14,0,199,200,5,43,0,0,200,202,3,28,14,0,201,199,1,0,0,0,
		202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,19,1,0,0,0,205,203,
		1,0,0,0,206,211,3,22,11,0,207,208,5,27,0,0,208,210,3,22,11,0,209,207,1,
		0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,21,1,0,0,0,213,
		211,1,0,0,0,214,219,3,24,12,0,215,216,5,26,0,0,216,218,3,24,12,0,217,215,
		1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,23,1,0,0,0,
		221,219,1,0,0,0,222,223,3,28,14,0,223,224,3,38,19,0,224,225,3,28,14,0,
		225,25,1,0,0,0,226,227,5,44,0,0,227,228,3,12,6,0,228,229,5,45,0,0,229,
		27,1,0,0,0,230,232,5,29,0,0,231,230,1,0,0,0,231,232,1,0,0,0,232,234,1,
		0,0,0,233,235,3,26,13,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,
		0,236,242,3,30,15,0,237,238,3,40,20,0,238,239,3,30,15,0,239,241,1,0,0,
		0,240,237,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,
		29,1,0,0,0,244,242,1,0,0,0,245,251,3,32,16,0,246,247,3,42,21,0,247,248,
		3,32,16,0,248,250,1,0,0,0,249,246,1,0,0,0,250,253,1,0,0,0,251,249,1,0,
		0,0,251,252,1,0,0,0,252,31,1,0,0,0,253,251,1,0,0,0,254,260,3,36,18,0,255,
		257,5,44,0,0,256,258,3,18,9,0,257,256,1,0,0,0,257,258,1,0,0,0,258,259,
		1,0,0,0,259,261,5,45,0,0,260,255,1,0,0,0,260,261,1,0,0,0,261,274,1,0,0,
		0,262,274,5,23,0,0,263,274,5,22,0,0,264,274,5,20,0,0,265,274,5,21,0,0,
		266,274,5,19,0,0,267,268,5,18,0,0,268,274,3,34,17,0,269,270,5,44,0,0,270,
		271,3,28,14,0,271,272,5,45,0,0,272,274,1,0,0,0,273,254,1,0,0,0,273,262,
		1,0,0,0,273,263,1,0,0,0,273,264,1,0,0,0,273,265,1,0,0,0,273,266,1,0,0,
		0,273,267,1,0,0,0,273,269,1,0,0,0,274,33,1,0,0,0,275,283,5,2,0,0,276,283,
		5,4,0,0,277,283,5,6,0,0,278,283,5,5,0,0,279,283,5,3,0,0,280,283,5,50,0,
		0,281,283,5,1,0,0,282,275,1,0,0,0,282,276,1,0,0,0,282,277,1,0,0,0,282,
		278,1,0,0,0,282,279,1,0,0,0,282,280,1,0,0,0,282,281,1,0,0,0,283,35,1,0,
		0,0,284,295,3,34,17,0,285,286,5,41,0,0,286,294,3,34,17,0,287,289,5,48,
		0,0,288,290,5,29,0,0,289,288,1,0,0,0,289,290,1,0,0,0,290,291,1,0,0,0,291,
		292,7,1,0,0,292,294,5,49,0,0,293,285,1,0,0,0,293,287,1,0,0,0,294,297,1,
		0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,37,1,0,0,0,297,295,1,0,0,0,298,
		299,7,2,0,0,299,39,1,0,0,0,300,301,7,3,0,0,301,41,1,0,0,0,302,303,7,4,
		0,0,303,43,1,0,0,0,33,47,56,58,74,85,92,97,110,116,123,128,139,146,150,
		165,179,186,191,193,203,211,219,231,234,242,251,257,260,273,282,289,293,
		295
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
